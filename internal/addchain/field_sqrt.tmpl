// Copyright (c) 2023 Yawning Angel
//
// SPDX-License-Identifier: BSD-3-Clause

// Code generated by {{ .Meta.Name }}. DO NOT EDIT.

package field

// Sqrt sets `fe = Sqrt(a)`, and returns 1 iff the square root exists.
// In all other cases, `fe = 0`, and 0 is returned.
func (fe *Element) Sqrt(a *Element) (*Element, uint64) {
	tmp := NewElementFrom(a)
	tmp.candidateSqrt(tmp)

	// Check that a square root was actually calculated
	isSqrt := NewElement().Square(tmp).Equal(a)
	fe.ConditionalSelect(&zeroElement, tmp, isSqrt)

	return fe, isSqrt
}

func (z *Element) candidateSqrt(x *Element) *Element {
	// Square root computation is derived from the addition chain:
	//
	{{- range lines (format .Script) }}
	//	{{ . }}
	{{- end }}
	//
	// Operations: {{ .Ops.Doubles }} squares {{ .Ops.Adds }} multiplies
	//
	// Generated by {{ .Meta.Module }} {{ .Meta.ReleaseTag }}.

	// Allocate Temporaries.
	var (
		{{- range .Program.Temporaries }}
		{{ . }} = NewElement()
		{{- end -}}
	)

	{{ range $i := .Program.Instructions }}
	// {{ printf "Step %d: %s = x^%#x" $i.Output.Index $i.Output (index $.Chain $i.Output.Index) }}
	{{- with add $i.Op }}
	{{ $i.Output }}.Multiply({{ .X }}, {{ .Y }})
	{{ end -}}

	{{- with double $i.Op }}
	{{ $i.Output }}.Square({{ .X }})
	{{ end -}}

	{{- with shift $i.Op }}
	{{ $i.Output }}.Pow2k({{ .X }}, {{ .S }})
	{{ end -}}

	{{- end }}
	return z
}